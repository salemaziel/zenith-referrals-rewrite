{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/functions';\nimport config from \"../../../firebaseConfig\";\n\nvar Firebase = function Firebase() {\n  var _this = this;\n\n  _classCallCheck(this, Firebase);\n\n  this.doCreateUserWithEmailAndPassword = function (email, password) {\n    return _this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithEmailAndPassword = function (email, password) {\n    return _this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithGoogle = function () {\n    return _this.auth.signInWithPopup(_this.googleProvider);\n  };\n\n  this.doSignOut = function () {\n    return _this.auth.signOut();\n  };\n\n  this.doPasswordReset = function (email) {\n    return _this.auth.sendPasswordResetEmail(email);\n  };\n\n  this.doSendEmailVerification = function () {\n    return _this.auth.currentUser.sendEmailVerification({\n      url: window.location.href\n    });\n  };\n\n  this.doPasswordUpdate = function (password) {\n    return _this.auth.currentUser.updatePassword(password);\n  };\n\n  this.onAuthUserListener = function (next, fallback) {\n    return _this.auth.onAuthStateChanged(function (authUser) {\n      if (authUser) {\n        _this.user(authUser.uid).get().then(function (snapshot) {\n          var dbUser = snapshot.data();\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n  };\n\n  this.user = function (uid) {\n    return _this.db.doc(\"users/\" + uid);\n  };\n\n  this.users = function () {\n    return _this.db.collection('users');\n  };\n\n  this.posts = function () {\n    return _this.db.collection('posts');\n  };\n\n  this.post = function (post) {\n    return _this.posts().where('slug', '==', post.slug);\n  };\n\n  app.initializeApp(config);\n  this.fieldValue = app.firestore.FieldValue;\n  this.emailAuthProvider = app.auth.EmailAuthProvider;\n  this.auth = app.auth();\n  this.db = app.firestore();\n  this.functions = app.functions();\n  this.googleProvider = new app.auth.GoogleAuthProvider();\n};\n\nvar firebase;\n\nfunction getFirebase(app, auth, database) {\n  if (!firebase) {\n    firebase = new Firebase(app, auth, database);\n  }\n\n  return firebase;\n}\n\nexport default getFirebase;","map":{"version":3,"sources":["/home/pc/Public/zenith/gatsby-firebase-starter-NEW/src/utils/Firebase/firebase.js"],"names":["app","config","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","window","location","href","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","emailVerified","providerData","db","doc","users","collection","posts","post","where","slug","initializeApp","fieldValue","firestore","FieldValue","emailAuthProvider","EmailAuthProvider","functions","GoogleAuthProvider","firebase","getFirebase","database"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/functions';\n\nimport config from '../../../firebaseConfig';\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /* Helper */\n\n    this.fieldValue = app.firestore.FieldValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.firestore();\n    this.functions = app.functions();\n\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    /*this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();*/\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n//  doSignInWithFacebook = () =>\n//    this.auth.signInWithPopup(this.facebookProvider);\n\n//  doSignInWithTwitter = () =>\n//    this.auth.signInWithPopup(this.twitterProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: window.location.href,\n    });\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .get()\n          .then(snapshot => {\n            const dbUser = snapshot.data();\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n\n  user = uid => this.db.doc(`users/${uid}`);\n\n  users = () => this.db.collection('users');\n\n  posts = () => this.db.collection('posts');\n\n  post = post => this.posts().where('slug', '==', post.slug);\n}\n\nlet firebase;\n\nfunction getFirebase(app, auth, database) {\n  if (!firebase) {\n    firebase = new Firebase(app, auth, database);\n  }\n\n  return firebase;\n}\n\nexport default getFirebase;\n"]},"metadata":{},"sourceType":"module"}