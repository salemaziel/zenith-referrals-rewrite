{"ast":null,"code":"var _jsxFileName = \"/home/pc/Public/zenith/gatsby-firebase-starter-NEW/.cache/app.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport domReady from \"@mikaelkristiansson/domready\";\nimport io from \"socket.io-client\";\nimport socketIo from \"./socketIo\";\nimport emitter from \"./emitter\";\nimport { apiRunner, apiRunnerAsync } from \"./api-runner-browser\";\nimport { setLoader, publicLoader } from \"./loader\";\nimport DevLoader from \"./dev-loader\";\nimport syncRequires from \"./sync-requires\";\nimport matchPaths from \"./match-paths.json\";\nwindow.___emitter = emitter;\nvar loader = new DevLoader(syncRequires, matchPaths);\nsetLoader(loader);\nloader.setApiRunner(apiRunner);\nwindow.___loader = publicLoader;\napiRunnerAsync(\"onClientEntry\").then(function () {\n  var socket = socketIo();\n\n  if (socket) {\n    socket.on(\"reload\", function () {\n      window.location.reload();\n    });\n  }\n\n  fetch(\"/___services\").then(function (res) {\n    return res.json();\n  }).then(function (services) {\n    if (services.developstatusserver) {\n      var parentSocket = io(window.location.protocol + \"//\" + window.location.hostname + \":\" + services.developstatusserver.port);\n      parentSocket.on(\"develop:needs-restart\", function (msg) {\n        if (window.confirm(\"The develop process needs to be restarted for the changes to \" + msg.dirtyFile + \" to be applied.\\nDo you want to restart the develop process now?\")) {\n          parentSocket.once(\"develop:is-starting\", function (msg) {\n            window.location.reload();\n          });\n          parentSocket.once(\"develop:started\", function (msg) {\n            window.location.reload();\n          });\n          parentSocket.emit(\"develop:restart\");\n        }\n      });\n    }\n  });\n\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.getRegistrations().then(function (registrations) {\n      if (registrations.length > 0) console.warn(\"Warning: found one or more service workers present.\", \"If your site isn't behaving as expected, you might want to remove these.\", registrations);\n    });\n  }\n\n  var rootElement = document.getElementById(\"___gatsby\");\n  var renderer = apiRunner(\"replaceHydrateFunction\", undefined, ReactDOM.render)[0];\n  Promise.all([loader.loadPage(\"/dev-404-page/\"), loader.loadPage(\"/404.html\"), loader.loadPage(window.location.pathname)]).then(function () {\n    var preferDefault = function preferDefault(m) {\n      return m && m.default || m;\n    };\n\n    var Root = preferDefault(require(\"./root\"));\n    domReady(function () {\n      renderer(React.createElement(Root, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 16\n        }\n      }), rootElement, function () {\n        apiRunner(\"onInitialClientRender\");\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/home/pc/Public/zenith/gatsby-firebase-starter-NEW/.cache/app.js"],"names":["React","ReactDOM","domReady","io","socketIo","emitter","apiRunner","apiRunnerAsync","setLoader","publicLoader","DevLoader","syncRequires","matchPaths","window","___emitter","loader","setApiRunner","___loader","then","socket","on","location","reload","fetch","res","json","services","developstatusserver","parentSocket","protocol","hostname","port","msg","confirm","dirtyFile","once","emit","navigator","serviceWorker","getRegistrations","registrations","length","console","warn","rootElement","document","getElementById","renderer","undefined","render","Promise","all","loadPage","pathname","preferDefault","m","default","Root","require"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport domReady from \"@mikaelkristiansson/domready\"\nimport io from \"socket.io-client\"\n\nimport socketIo from \"./socketIo\"\nimport emitter from \"./emitter\"\nimport { apiRunner, apiRunnerAsync } from \"./api-runner-browser\"\nimport { setLoader, publicLoader } from \"./loader\"\nimport DevLoader from \"./dev-loader\"\nimport syncRequires from \"./sync-requires\"\n// Generated during bootstrap\nimport matchPaths from \"./match-paths.json\"\n\nwindow.___emitter = emitter\n\nconst loader = new DevLoader(syncRequires, matchPaths)\nsetLoader(loader)\nloader.setApiRunner(apiRunner)\n\nwindow.___loader = publicLoader\n\n// Let the site/plugins run code very early.\napiRunnerAsync(`onClientEntry`).then(() => {\n  // Hook up the client to socket.io on server\n  const socket = socketIo()\n  if (socket) {\n    socket.on(`reload`, () => {\n      window.location.reload()\n    })\n  }\n\n  fetch(`/___services`)\n    .then(res => res.json())\n    .then(services => {\n      if (services.developstatusserver) {\n        const parentSocket = io(\n          `${window.location.protocol}//${window.location.hostname}:${services.developstatusserver.port}`\n        )\n\n        parentSocket.on(`develop:needs-restart`, msg => {\n          if (\n            window.confirm(\n              `The develop process needs to be restarted for the changes to ${msg.dirtyFile} to be applied.\\nDo you want to restart the develop process now?`\n            )\n          ) {\n            parentSocket.once(`develop:is-starting`, msg => {\n              window.location.reload()\n            })\n            parentSocket.once(`develop:started`, msg => {\n              window.location.reload()\n            })\n            parentSocket.emit(`develop:restart`)\n          }\n        })\n      }\n    })\n\n  /**\n   * Service Workers are persistent by nature. They stick around,\n   * serving a cached version of the site if they aren't removed.\n   * This is especially frustrating when you need to test the\n   * production build on your local machine.\n   *\n   * Let's warn if we find service workers in development.\n   */\n  if (`serviceWorker` in navigator) {\n    navigator.serviceWorker.getRegistrations().then(registrations => {\n      if (registrations.length > 0)\n        console.warn(\n          `Warning: found one or more service workers present.`,\n          `If your site isn't behaving as expected, you might want to remove these.`,\n          registrations\n        )\n    })\n  }\n\n  const rootElement = document.getElementById(`___gatsby`)\n\n  const renderer = apiRunner(\n    `replaceHydrateFunction`,\n    undefined,\n    ReactDOM.render\n  )[0]\n\n  Promise.all([\n    loader.loadPage(`/dev-404-page/`),\n    loader.loadPage(`/404.html`),\n    loader.loadPage(window.location.pathname),\n  ]).then(() => {\n    const preferDefault = m => (m && m.default) || m\n    let Root = preferDefault(require(`./root`))\n    domReady(() => {\n      renderer(<Root />, rootElement, () => {\n        apiRunner(`onInitialClientRender`)\n      })\n    })\n  })\n})\n"]},"metadata":{},"sourceType":"module"}