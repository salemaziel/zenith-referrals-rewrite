{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nexport var useAnimatedValue = function useAnimatedValue(initialValue) {\n  var ref = useRef(new Animated.Value(initialValue));\n  return ref.current;\n};\n\nvar getInitialValue = function getInitialValue(config) {\n  if (typeof config.initialValue !== 'undefined') return config.initialValue;else {\n    return config.toValue;\n  }\n};\n\nvar getAnimationType = function getAnimationType(config) {\n  return config.type || 'timing';\n};\n\nexport var useAnimation = function useAnimation(config) {\n  var animatedValue = useAnimatedValue(getInitialValue(config));\n\n  var animate = function animate() {\n    if (config.type === 'timing') {\n      Animated.timing(animatedValue, config).start();\n    } else if (config.type === 'spring') {\n      Animated.spring(animatedValue, config).start();\n    } else {\n      throw new Error('unsupported animation type=' + config.type);\n    }\n  };\n\n  useEffect(animate, [config.toValue]);\n  return animatedValue;\n};","map":{"version":3,"sources":["../src/AnimationHooks.ts"],"names":[],"mappings":"AAAA,SAAgB,MAAhB,EAAwB,SAAxB,QAAyC,OAAzC;;AASA,OAAO,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,YAAD,EAAyC;AACvE,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,QAAQ,CAAC,KAAb,CAAmB,YAAnB,CAAD,CAAlB;AACA,SAAO,GAAG,CAAC,OAAX;AACD,CAHM;;AAoBP,IAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,MAAD,EAA+B;AACrD,MAAI,OAAO,MAAM,CAAC,YAAd,KAA+B,WAAnC,EAAgD,OAAO,MAAM,CAAC,YAAd,CAAhD,KACK;AACH,WAAO,MAAM,CAAC,OAAd;AACD;AACF,CALD;;AAOA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,MAAD;AAAA,SAAgC,MAAM,CAAC,IAAP,IAAe,QAA/C;AAAA,CAAzB;;AAEA,OAAO,IAAM,YAAY,GAAG,SAAf,YAAe,CAAC,MAAD,EAA+C;AACzE,MAAM,aAAa,GAAG,gBAAgB,CAAC,eAAe,CAAC,MAAD,CAAhB,CAAtC;;AAEA,MAAM,OAAO,GAAG,SAAV,OAAU,GAAK;AACnB,QAAI,MAAM,CAAC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,MAAA,QAAQ,CAAC,MAAT,CAAgB,aAAhB,EAA+B,MAA/B,EAAuC,KAAvC;AACD,KAFD,MAEO,IAAI,MAAM,CAAC,IAAP,KAAgB,QAApB,EAA8B;AACnC,MAAA,QAAQ,CAAC,MAAT,CAAgB,aAAhB,EAA+B,MAA/B,EAAuC,KAAvC;AACD,KAFM,MAEA;AAEL,YAAM,IAAI,KAAJ,CAAU,gCAAgC,MAAM,CAAC,IAAjD,CAAN;AACD;AACF,GATD;;AAYA,EAAA,SAAS,CAAC,OAAD,EAAU,CAAC,MAAM,CAAC,OAAR,CAAV,CAAT;AAEA,SAAO,aAAP;AACD,CAlBM","sourceRoot":"","sourcesContent":["import { useRef, useEffect } from 'react';\nimport { Animated } from 'react-native';\nexport const useAnimatedValue = (initialValue) => {\n    const ref = useRef(new Animated.Value(initialValue));\n    return ref.current;\n};\nconst getInitialValue = (config) => {\n    if (typeof config.initialValue !== 'undefined')\n        return config.initialValue;\n    else {\n        return config.toValue; // TODO deal with other types possibilities here\n    }\n};\nconst getAnimationType = (config) => config.type || 'timing';\nexport const useAnimation = (config) => {\n    const animatedValue = useAnimatedValue(getInitialValue(config));\n    const animate = () => {\n        if (config.type === 'timing') {\n            Animated.timing(animatedValue, config).start();\n        }\n        else if (config.type === 'spring') {\n            Animated.spring(animatedValue, config).start();\n        }\n        else {\n            // @ts-ignore\n            throw new Error('unsupported animation type=' + config.type);\n        }\n    };\n    // Currently useEffect is buggy, see https://github.com/facebook/react-native/issues/21967\n    useEffect(animate, [config.toValue]);\n    return animatedValue;\n};\n//# sourceMappingURL=AnimationHooks.js.map"]},"metadata":{},"sourceType":"module"}