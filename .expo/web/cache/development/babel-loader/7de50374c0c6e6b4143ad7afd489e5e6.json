{"ast":null,"code":"var plugins = require(\"./api-runner-browser-plugins\");\n\nvar _require$publicLoader = require(\"./loader\").publicLoader,\n    getResourcesForPathname = _require$publicLoader.getResourcesForPathname,\n    getResourcesForPathnameSync = _require$publicLoader.getResourcesForPathnameSync,\n    getResourceURLsForPathname = _require$publicLoader.getResourceURLsForPathname,\n    loadPage = _require$publicLoader.loadPage,\n    loadPageSync = _require$publicLoader.loadPageSync;\n\nexports.apiRunner = function (api) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var defaultReturn = arguments.length > 2 ? arguments[2] : undefined;\n  var argTransform = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (process.env.CYPRESS_SUPPORT) {\n    if (window.___apiHandler) {\n      window.___apiHandler(api);\n    } else if (window.___resolvedAPIs) {\n      window.___resolvedAPIs.push(api);\n    } else {\n      window.___resolvedAPIs = [api];\n    }\n  }\n\n  var results = plugins.map(function (plugin) {\n    if (!plugin.plugin[api]) {\n      return undefined;\n    }\n\n    args.getResourcesForPathnameSync = getResourcesForPathnameSync;\n    args.getResourcesForPathname = getResourcesForPathname;\n    args.getResourceURLsForPathname = getResourceURLsForPathname;\n    args.loadPage = loadPage;\n    args.loadPageSync = loadPageSync;\n    var result = plugin.plugin[api](args, plugin.options);\n\n    if (result && argTransform) {\n      args = argTransform({\n        args: args,\n        result: result,\n        plugin: plugin\n      });\n    }\n\n    return result;\n  });\n  results = results.filter(function (result) {\n    return typeof result !== \"undefined\";\n  });\n\n  if (results.length > 0) {\n    return results;\n  } else if (defaultReturn) {\n    return [defaultReturn];\n  } else {\n    return [];\n  }\n};\n\nexports.apiRunnerAsync = function (api, args, defaultReturn) {\n  return plugins.reduce(function (previous, next) {\n    return next.plugin[api] ? previous.then(function () {\n      return next.plugin[api](args, next.options);\n    }) : previous;\n  }, Promise.resolve());\n};","map":{"version":3,"sources":["/home/pc/Public/zenith/gatsby-firebase-starter-NEW/.cache/api-runner-browser.js"],"names":["plugins","require","publicLoader","getResourcesForPathname","getResourcesForPathnameSync","getResourceURLsForPathname","loadPage","loadPageSync","exports","apiRunner","api","args","defaultReturn","argTransform","process","env","CYPRESS_SUPPORT","window","___apiHandler","___resolvedAPIs","push","results","map","plugin","undefined","result","options","filter","length","apiRunnerAsync","reduce","previous","next","then","Promise","resolve"],"mappings":"AAAA,IAAMA,OAAO,GAAGC,OAAO,gCAAvB;;4BAOIA,OAAO,YAAP,CAAoBC,Y;IALtBC,uB,yBAAAA,uB;IACAC,2B,yBAAAA,2B;IACAC,0B,yBAAAA,0B;IACAC,Q,yBAAAA,Q;IACAC,Y,yBAAAA,Y;;AAGFC,OAAO,CAACC,SAAR,GAAoB,UAACC,GAAD,EAAiD;AAAA,MAA3CC,IAA2C,uEAApC,EAAoC;AAAA,MAAhCC,aAAgC;AAAA,MAAjBC,YAAiB;;AAEnE,MAAIC,OAAO,CAACC,GAAR,CAAYC,eAAhB,EAAiC;AAC/B,QAAIC,MAAM,CAACC,aAAX,EAA0B;AACxBD,MAAAA,MAAM,CAACC,aAAP,CAAqBR,GAArB;AACD,KAFD,MAEO,IAAIO,MAAM,CAACE,eAAX,EAA4B;AACjCF,MAAAA,MAAM,CAACE,eAAP,CAAuBC,IAAvB,CAA4BV,GAA5B;AACD,KAFM,MAEA;AACLO,MAAAA,MAAM,CAACE,eAAP,GAAyB,CAACT,GAAD,CAAzB;AACD;AACF;;AAED,MAAIW,OAAO,GAAGrB,OAAO,CAACsB,GAAR,CAAY,UAAAC,MAAM,EAAI;AAClC,QAAI,CAACA,MAAM,CAACA,MAAP,CAAcb,GAAd,CAAL,EAAyB;AACvB,aAAOc,SAAP;AACD;;AAGDb,IAAAA,IAAI,CAACP,2BAAL,GAAmCA,2BAAnC;AAEAO,IAAAA,IAAI,CAACR,uBAAL,GAA+BA,uBAA/B;AACAQ,IAAAA,IAAI,CAACN,0BAAL,GAAkCA,0BAAlC;AACAM,IAAAA,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAAA,IAAI,CAACJ,YAAL,GAAoBA,YAApB;AAEA,QAAMkB,MAAM,GAAGF,MAAM,CAACA,MAAP,CAAcb,GAAd,EAAmBC,IAAnB,EAAyBY,MAAM,CAACG,OAAhC,CAAf;;AACA,QAAID,MAAM,IAAIZ,YAAd,EAA4B;AAC1BF,MAAAA,IAAI,GAAGE,YAAY,CAAC;AAAEF,QAAAA,IAAI,EAAJA,IAAF;AAAQc,QAAAA,MAAM,EAANA,MAAR;AAAgBF,QAAAA,MAAM,EAANA;AAAhB,OAAD,CAAnB;AACD;;AACD,WAAOE,MAAP;AACD,GAlBa,CAAd;AAqBAJ,EAAAA,OAAO,GAAGA,OAAO,CAACM,MAAR,CAAe,UAAAF,MAAM;AAAA,WAAI,OAAOA,MAAP,gBAAJ;AAAA,GAArB,CAAV;;AAEA,MAAIJ,OAAO,CAACO,MAAR,GAAiB,CAArB,EAAwB;AACtB,WAAOP,OAAP;AACD,GAFD,MAEO,IAAIT,aAAJ,EAAmB;AACxB,WAAO,CAACA,aAAD,CAAP;AACD,GAFM,MAEA;AACL,WAAO,EAAP;AACD;AACF,CA1CD;;AA4CAJ,OAAO,CAACqB,cAAR,GAAyB,UAACnB,GAAD,EAAMC,IAAN,EAAYC,aAAZ;AAAA,SACvBZ,OAAO,CAAC8B,MAAR,CACE,UAACC,QAAD,EAAWC,IAAX;AAAA,WACEA,IAAI,CAACT,MAAL,CAAYb,GAAZ,IACIqB,QAAQ,CAACE,IAAT,CAAc;AAAA,aAAMD,IAAI,CAACT,MAAL,CAAYb,GAAZ,EAAiBC,IAAjB,EAAuBqB,IAAI,CAACN,OAA5B,CAAN;AAAA,KAAd,CADJ,GAEIK,QAHN;AAAA,GADF,EAKEG,OAAO,CAACC,OAAR,EALF,CADuB;AAAA,CAAzB","sourcesContent":["const plugins = require(`./api-runner-browser-plugins`)\nconst {\n  getResourcesForPathname,\n  getResourcesForPathnameSync,\n  getResourceURLsForPathname,\n  loadPage,\n  loadPageSync,\n} = require(`./loader`).publicLoader\n\nexports.apiRunner = (api, args = {}, defaultReturn, argTransform) => {\n  // Hooks for gatsby-cypress's API handler\n  if (process.env.CYPRESS_SUPPORT) {\n    if (window.___apiHandler) {\n      window.___apiHandler(api)\n    } else if (window.___resolvedAPIs) {\n      window.___resolvedAPIs.push(api)\n    } else {\n      window.___resolvedAPIs = [api]\n    }\n  }\n\n  let results = plugins.map(plugin => {\n    if (!plugin.plugin[api]) {\n      return undefined\n    }\n\n    // Deprecated April 2019. Use `loadPageSync` instead\n    args.getResourcesForPathnameSync = getResourcesForPathnameSync\n    // Deprecated April 2019. Use `loadPage` instead\n    args.getResourcesForPathname = getResourcesForPathname\n    args.getResourceURLsForPathname = getResourceURLsForPathname\n    args.loadPage = loadPage\n    args.loadPageSync = loadPageSync\n\n    const result = plugin.plugin[api](args, plugin.options)\n    if (result && argTransform) {\n      args = argTransform({ args, result, plugin })\n    }\n    return result\n  })\n\n  // Filter out undefined results.\n  results = results.filter(result => typeof result !== `undefined`)\n\n  if (results.length > 0) {\n    return results\n  } else if (defaultReturn) {\n    return [defaultReturn]\n  } else {\n    return []\n  }\n}\n\nexports.apiRunnerAsync = (api, args, defaultReturn) =>\n  plugins.reduce(\n    (previous, next) =>\n      next.plugin[api]\n        ? previous.then(() => next.plugin[api](args, next.options))\n        : previous,\n    Promise.resolve()\n  )\n"]},"metadata":{},"sourceType":"script"}