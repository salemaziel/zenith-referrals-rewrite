{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/pc/Public/zenith/gatsby-firebase-starter-NEW/src/components/reactnative/camera/AppRevealView.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useAnimation } from 'react-native-animation-hooks';\nimport { ActivityIndicator } from 'react-native-paper';\nimport { delayPromise } from \"./utils/promiseUtils\";\n\nvar AppSpinnerView = function AppSpinnerView(_ref) {\n  var style = _ref.style;\n  return React.createElement(View, {\n    style: [{\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#ffffff'\n    }, style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 3\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar AppRevealView = function AppRevealView(_ref2) {\n  var children = _ref2.children,\n      _ref2$placeholder = _ref2.placeholder,\n      placeholder = _ref2$placeholder === void 0 ? React.createElement(AppSpinnerView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }) : _ref2$placeholder,\n      _ref2$delay = _ref2.delay,\n      delay = _ref2$delay === void 0 ? 0 : _ref2$delay;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      reveal = _useState2[0],\n      setReveal = _useState2[1];\n\n  useEffect(function () {\n    var unmounted = false;\n\n    var asyncOnMount = function asyncOnMount() {\n      return _regeneratorRuntime.async(function asyncOnMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(delayPromise(delay));\n\n            case 2:\n              !unmounted && setReveal(true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    asyncOnMount().catch(console.error);\n    return function () {\n      unmounted = true;\n    };\n  }, []);\n  var placeholderOpacity = useAnimation({\n    type: 'timing',\n    duration: 700,\n    toValue: reveal ? 0 : 1,\n    useNativeDriver: true\n  });\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      position: 'relative'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, children), React.createElement(Animated.View, {\n    style: [StyleSheet.absoluteFill, {\n      opacity: placeholderOpacity\n    }],\n    pointerEvents: reveal ? 'none' : 'auto',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, placeholder));\n};\n\nexport default AppRevealView;","map":{"version":3,"sources":["/home/pc/Public/zenith/gatsby-firebase-starter-NEW/src/components/reactnative/camera/AppRevealView.jsx"],"names":["React","useEffect","useState","useAnimation","ActivityIndicator","delayPromise","AppSpinnerView","style","flex","alignItems","justifyContent","backgroundColor","AppRevealView","children","placeholder","delay","reveal","setReveal","unmounted","asyncOnMount","catch","console","error","placeholderOpacity","type","duration","toValue","useNativeDriver","position","StyleSheet","absoluteFill","opacity"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,SAASC,YAAT;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SACrB,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,CADR;AAEEC,MAAAA,UAAU,EAAE,QAFd;AAGEC,MAAAA,cAAc,EAAE,QAHlB;AAIEC,MAAAA,eAAe,EAAE;AAJnB,KADK,EAOLJ,KAPK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADqB;AAAA,CAAvB;;AAgBA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,QAIhB;AAAA,MAHJC,QAGI,SAHJA,QAGI;AAAA,gCAFJC,WAEI;AAAA,MAFJA,WAEI,kCAFU,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEV;AAAA,0BADJC,KACI;AAAA,MADJA,KACI,4BADI,CACJ;;AAAA,kBACwBb,QAAQ,CAAC,KAAD,CADhC;AAAA;AAAA,MACGc,MADH;AAAA,MACWC,SADX;;AAGJhB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIiB,SAAS,GAAG,KAAhB;;AAEA,QAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACbd,YAAY,CAACU,KAAD,CADC;;AAAA;AAEnB,eAACG,SAAD,IAAcD,SAAS,CAAC,IAAD,CAAvB;;AAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAKAE,IAAAA,YAAY,GAAGC,KAAf,CAAqBC,OAAO,CAACC,KAA7B;AAEA,WAAO,YAAM;AACXJ,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAeA,MAAMK,kBAAkB,GAAGpB,YAAY,CAAC;AACtCqB,IAAAA,IAAI,EAAE,QADgC;AAEtCC,IAAAA,QAAQ,EAAE,GAF4B;AAGtCC,IAAAA,OAAO,EAAEV,MAAM,GAAG,CAAH,GAAO,CAHgB;AAItCW,IAAAA,eAAe,EAAE;AAJqB,GAAD,CAAvC;AAOA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEnB,MAAAA,IAAI,EAAE,CAAR;AAAWoB,MAAAA,QAAQ,EAAE;AAArB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEpB,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BK,QAA3B,CADF,EAEE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CAACgB,UAAU,CAACC,YAAZ,EAA0B;AAAEC,MAAAA,OAAO,EAAER;AAAX,KAA1B,CADT;AAEE,IAAA,aAAa,EAAEP,MAAM,GAAG,MAAH,GAAY,MAFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGF,WAJH,CAFF,CADF;AAWD,CAxCD;;AA0CA,eAAeF,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Animated, StyleSheet } from 'react-native';\nimport { useAnimation } from 'react-native-animation-hooks';\nimport { ActivityIndicator } from 'react-native-paper';\nimport { delayPromise } from './utils/promiseUtils';\n\nconst AppSpinnerView = ({ style }) => (\n  <View\n    style={[\n      {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#ffffff',\n      },\n      style,\n    ]}\n  >\n    <ActivityIndicator size=\"large\" />\n  </View>\n);\n\nconst AppRevealView = ({\n  children,\n  placeholder = <AppSpinnerView />,\n  delay = 0,\n}) => {\n  const [reveal, setReveal] = useState(false);\n\n  useEffect(() => {\n    let unmounted = false;\n\n    const asyncOnMount = async () => {\n      await delayPromise(delay);\n      !unmounted && setReveal(true);\n    };\n\n    asyncOnMount().catch(console.error);\n\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n\n  const placeholderOpacity = useAnimation({\n    type: 'timing',\n    duration: 700,\n    toValue: reveal ? 0 : 1,\n    useNativeDriver: true,\n  });\n\n  return (\n    <View style={{ flex: 1, position: 'relative' }}>\n      <View style={{ flex: 1 }}>{children}</View>\n      <Animated.View\n        style={[StyleSheet.absoluteFill, { opacity: placeholderOpacity }]}\n        pointerEvents={reveal ? 'none' : 'auto'}\n      >\n        {placeholder}\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default AppRevealView;"]},"metadata":{},"sourceType":"module"}