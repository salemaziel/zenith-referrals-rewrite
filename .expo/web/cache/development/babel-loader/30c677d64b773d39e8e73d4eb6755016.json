{"ast":null,"code":"var support = function support(feature) {\n  if (typeof document === \"undefined\") {\n    return false;\n  }\n\n  var fakeLink = document.createElement(\"link\");\n\n  try {\n    if (fakeLink.relList && typeof fakeLink.relList.supports === \"function\") {\n      return fakeLink.relList.supports(feature);\n    }\n  } catch (err) {\n    return false;\n  }\n\n  return false;\n};\n\nvar linkPrefetchStrategy = function linkPrefetchStrategy(url, options) {\n  return new Promise(function (resolve, reject) {\n    if (typeof document === \"undefined\") {\n      reject();\n      return;\n    }\n\n    var link = document.createElement(\"link\");\n    link.setAttribute(\"rel\", \"prefetch\");\n    link.setAttribute(\"href\", url);\n    Object.keys(options).forEach(function (key) {\n      link.setAttribute(key, options[key]);\n    });\n    link.onload = resolve;\n    link.onerror = reject;\n    var parentElement = document.getElementsByTagName(\"head\")[0] || document.getElementsByName(\"script\")[0].parentNode;\n    parentElement.appendChild(link);\n  });\n};\n\nvar xhrPrefetchStrategy = function xhrPrefetchStrategy(url) {\n  return new Promise(function (resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", url, true);\n\n    req.onload = function () {\n      if (req.status === 200) {\n        resolve();\n      } else {\n        reject();\n      }\n    };\n\n    req.send(null);\n  });\n};\n\nvar supportedPrefetchStrategy = support(\"prefetch\") ? linkPrefetchStrategy : xhrPrefetchStrategy;\nvar preFetched = {};\n\nvar prefetch = function prefetch(url, options) {\n  return new Promise(function (resolve) {\n    if (preFetched[url]) {\n      resolve();\n      return;\n    }\n\n    supportedPrefetchStrategy(url, options).then(function () {\n      resolve();\n      preFetched[url] = true;\n    }).catch(function () {});\n  });\n};\n\nexport default prefetch;","map":{"version":3,"sources":["/home/pc/Public/zenith/gatsby-firebase-starter-NEW/.cache/prefetch.js"],"names":["support","feature","document","fakeLink","createElement","relList","supports","err","linkPrefetchStrategy","url","options","Promise","resolve","reject","link","setAttribute","Object","keys","forEach","key","onload","onerror","parentElement","getElementsByTagName","getElementsByName","parentNode","appendChild","xhrPrefetchStrategy","req","XMLHttpRequest","open","status","send","supportedPrefetchStrategy","preFetched","prefetch","then","catch"],"mappings":"AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAUC,OAAV,EAAmB;AACjC,MAAI,OAAOC,QAAP,gBAAJ,EAAqC;AACnC,WAAO,KAAP;AACD;;AACD,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,aAAT,QAAjB;;AACA,MAAI;AACF,QAAID,QAAQ,CAACE,OAAT,IAAoB,OAAOF,QAAQ,CAACE,OAAT,CAAiBC,QAAxB,eAAxB,EAAyE;AACvE,aAAOH,QAAQ,CAACE,OAAT,CAAiBC,QAAjB,CAA0BL,OAA1B,CAAP;AACD;AACF,GAJD,CAIE,OAAOM,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;;AACD,SAAO,KAAP;AACD,CAbD;;AAeA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUC,GAAV,EAAeC,OAAf,EAAwB;AACnD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI,OAAOX,QAAP,gBAAJ,EAAqC;AACnCW,MAAAA,MAAM;AACN;AACD;;AAED,QAAMC,IAAI,GAAGZ,QAAQ,CAACE,aAAT,QAAb;AACAU,IAAAA,IAAI,CAACC,YAAL;AACAD,IAAAA,IAAI,CAACC,YAAL,SAA0BN,GAA1B;AAEAO,IAAAA,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBQ,OAArB,CAA6B,UAAAC,GAAG,EAAI;AAClCL,MAAAA,IAAI,CAACC,YAAL,CAAkBI,GAAlB,EAAuBT,OAAO,CAACS,GAAD,CAA9B;AACD,KAFD;AAIAL,IAAAA,IAAI,CAACM,MAAL,GAAcR,OAAd;AACAE,IAAAA,IAAI,CAACO,OAAL,GAAeR,MAAf;AAEA,QAAMS,aAAa,GACjBpB,QAAQ,CAACqB,oBAAT,SAAsC,CAAtC,KACArB,QAAQ,CAACsB,iBAAT,WAAqC,CAArC,EAAwCC,UAF1C;AAGAH,IAAAA,aAAa,CAACI,WAAd,CAA0BZ,IAA1B;AACD,GArBM,CAAP;AAsBD,CAvBD;;AAyBA,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAUlB,GAAV,EAAe;AACzC,SAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMe,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACAD,IAAAA,GAAG,CAACE,IAAJ,QAAgBrB,GAAhB,EAAqB,IAArB;;AAEAmB,IAAAA,GAAG,CAACR,MAAJ,GAAa,YAAM;AACjB,UAAIQ,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACtBnB,QAAAA,OAAO;AACR,OAFD,MAEO;AACLC,QAAAA,MAAM;AACP;AACF,KAND;;AAQAe,IAAAA,GAAG,CAACI,IAAJ,CAAS,IAAT;AACD,GAbM,CAAP;AAcD,CAfD;;AAiBA,IAAMC,yBAAyB,GAAGjC,OAAO,YAAP,GAC9BQ,oBAD8B,GAE9BmB,mBAFJ;AAIA,IAAMO,UAAU,GAAG,EAAnB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAU1B,GAAV,EAAeC,OAAf,EAAwB;AACvC,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,QAAIsB,UAAU,CAACzB,GAAD,CAAd,EAAqB;AACnBG,MAAAA,OAAO;AACP;AACD;;AAEDqB,IAAAA,yBAAyB,CAACxB,GAAD,EAAMC,OAAN,CAAzB,CACG0B,IADH,CACQ,YAAM;AACVxB,MAAAA,OAAO;AACPsB,MAAAA,UAAU,CAACzB,GAAD,CAAV,GAAkB,IAAlB;AACD,KAJH,EAKG4B,KALH,CAKS,YAAM,CAAE,CALjB;AAMD,GAZM,CAAP;AAaD,CAdD;;AAgBA,eAAeF,QAAf","sourcesContent":["const support = function (feature) {\n  if (typeof document === `undefined`) {\n    return false\n  }\n  const fakeLink = document.createElement(`link`)\n  try {\n    if (fakeLink.relList && typeof fakeLink.relList.supports === `function`) {\n      return fakeLink.relList.supports(feature)\n    }\n  } catch (err) {\n    return false\n  }\n  return false\n}\n\nconst linkPrefetchStrategy = function (url, options) {\n  return new Promise((resolve, reject) => {\n    if (typeof document === `undefined`) {\n      reject()\n      return\n    }\n\n    const link = document.createElement(`link`)\n    link.setAttribute(`rel`, `prefetch`)\n    link.setAttribute(`href`, url)\n\n    Object.keys(options).forEach(key => {\n      link.setAttribute(key, options[key])\n    })\n\n    link.onload = resolve\n    link.onerror = reject\n\n    const parentElement =\n      document.getElementsByTagName(`head`)[0] ||\n      document.getElementsByName(`script`)[0].parentNode\n    parentElement.appendChild(link)\n  })\n}\n\nconst xhrPrefetchStrategy = function (url) {\n  return new Promise((resolve, reject) => {\n    const req = new XMLHttpRequest()\n    req.open(`GET`, url, true)\n\n    req.onload = () => {\n      if (req.status === 200) {\n        resolve()\n      } else {\n        reject()\n      }\n    }\n\n    req.send(null)\n  })\n}\n\nconst supportedPrefetchStrategy = support(`prefetch`)\n  ? linkPrefetchStrategy\n  : xhrPrefetchStrategy\n\nconst preFetched = {}\n\nconst prefetch = function (url, options) {\n  return new Promise(resolve => {\n    if (preFetched[url]) {\n      resolve()\n      return\n    }\n\n    supportedPrefetchStrategy(url, options)\n      .then(() => {\n        resolve()\n        preFetched[url] = true\n      })\n      .catch(() => {}) // 404s are logged to the console anyway\n  })\n}\n\nexport default prefetch\n"]},"metadata":{},"sourceType":"module"}